import type { Metadata } from "next";
import { IBM_Plex_Mono, Montserrat, Poppins, Roboto,Cairo } from "next/font/google";

import i18nConfig from '@/i18nConfig';
import TranslationsProvider from "@/components/TranslationsProvider"
import Header from "@/module/Header/Header";
import Footer from "@/module/Footer/Footer";
import QueryProvider from "@/components/query-provider";
import readUserSession from "@/lib/actions";
import { Toaster } from "@/components/ui/toaster"
import initTranslations from "../i18n";

import "./globals.css";
import 'aos/dist/aos.css';

const poppins = Poppins({ subsets: ["latin"], weight: ["400", "500", "700"], variable: "--font-poppins" });
const montserrat = Montserrat({ subsets: ["latin"], weight: ["400", "500", "700"], variable: "--font-montserrat" });
const ibm_mono = IBM_Plex_Mono({ subsets: ["vietnamese"], weight: ["400", "500", "700"], variable: "--font-ibm_mono" });
const cairo = Cairo({ subsets: ["latin"], weight: ["400", "500", "700","800"], variable: "--font-cairo" });
// `cyrillic`, `cyrillic-ext`, `latin`, `latin-ext`, `vietnamese`
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const i18nNamespaces = ['common', "home", "nav"]

export function generateStaticParams() {
  return i18nConfig.locales.map(locale => ({ locale }));
}

export default async function RootLayout({
  children,
  params: { locale }
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string }
}>) {

  const { resources } = await initTranslations(locale, i18nNamespaces);

  const { data } = await readUserSession()


  return (
    <html lang={locale} dir={locale === "ar" ? "rtl" : "ltr"} >
      <body className={`${poppins.variable} ${montserrat.variable} ${ibm_mono.variable} ${cairo.variable} font-montserratArabic bg-white `}>
        <QueryProvider>
          <TranslationsProvider
            namespaces={i18nNamespaces}
            locale={locale}
            resources={resources}>
            <>
              <Header data={data} />
              {children}
              <Footer />
              <Toaster  />
            </>
          </TranslationsProvider>
        </QueryProvider>
      </body>
    </html>
  );
}
